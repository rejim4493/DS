#include <stdio.h>
#include <math.h>
#include <string.h>

#define MAX_TERMS 50

//==================== 結構定義 ====================//
struct Polynomial {
    int coeff;
    int exp;
};

//==================== 函式宣告 ====================//
void readPolynomial(struct Polynomial poly[], int *terms);
void displayPolynomial(struct Polynomial poly[], int terms, const char *name);
int addPolynomials(struct Polynomial P1[], int t1, struct Polynomial P2[], int t2, struct Polynomial result[]);
int subtractPolynomials(struct Polynomial P1[], int t1, struct Polynomial P2[], int t2, struct Polynomial result[]);
int multiplyPolynomials(struct Polynomial P1[], int t1, struct Polynomial P2[], int t2, struct Polynomial result[]);
void dividePolynomials(struct Polynomial P1[], int t1, struct Polynomial P2[], int t2,
                       struct Polynomial quotient[], int *tq,
                       struct Polynomial remainder[], int *tr);

void singlePolynomialMenu(); // 單一多項式 P 功能區（含基本與進階）
void twoPolynomialsMenu();   // 兩個多項式 P1, P2 功能區（含選單控制）

//==================== 共用基本函式 ====================//
void readPolynomial(struct Polynomial poly[], int *terms) {
    printf("Number of terms: ");
    scanf("%d", terms);
    printf("Enter coefficient and exponent in DESCENDING order:\n");
    for (int i = 0; i < *terms; i++) {
        printf("Coefficient: ");
        scanf("%d", &poly[i].coeff);
        printf("Exponent: ");
        scanf("%d", &poly[i].exp);
    }
}

void displayPolynomial(struct Polynomial poly[], int terms, const char *name) {
    if (terms == 0) {
        printf("%s=0\n", name);
        return;
    }
    printf("%s=", name);
    for (int i = 0; i < terms; i++) {
        int c = poly[i].coeff;
        int e = poly[i].exp;
        if (i > 0 && c >= 0)
            printf("+");
        printf("%d", c);
        if (e == 1)
            printf("x");
        else if (e != 0)
            printf("x^%d", e);
    }
    printf("\n");
}

//==================== 多項式運算 ====================//
int addPolynomials(struct Polynomial P1[], int t1, struct Polynomial P2[], int t2, struct Polynomial result[]) {
    int i = 0, j = 0, k = 0;
    while (i < t1 && j < t2) {
        if (P1[i].exp == P2[j].exp) {
            int sum = P1[i].coeff + P2[j].coeff;
            if (sum != 0) {
                result[k].coeff = sum;
                result[k].exp = P1[i].exp;
                k++;
            }
            i++; j++;
        } else if (P1[i].exp > P2[j].exp) result[k++] = P1[i++];
        else result[k++] = P2[j++];
    }
    while (i < t1) result[k++] = P1[i++];
    while (j < t2) result[k++] = P2[j++];
    return k;
}

int subtractPolynomials(struct Polynomial P1[], int t1, struct Polynomial P2[], int t2, struct Polynomial result[]) {
    struct Polynomial negP2[MAX_TERMS];
    for (int i = 0; i < t2; i++) {
        negP2[i].coeff = -P2[i].coeff;
        negP2[i].exp = P2[i].exp;
    }
    return addPolynomials(P1, t1, negP2, t2, result);
}

int multiplyPolynomials(struct Polynomial P1[], int t1, struct Polynomial P2[], int t2, struct Polynomial result[]) {
    struct Polynomial temp[MAX_TERMS];
    int ttemp = 0;
    for (int i = 0; i < t1; i++) {
        for (int j = 0; j < t2; j++) {
            temp[ttemp].coeff = P1[i].coeff * P2[j].coeff;
            temp[ttemp].exp = P1[i].exp + P2[j].exp;
            ttemp++;
        }
    }
    int k = 0;
    for (int i = 0; i < ttemp; i++) {
        if (temp[i].coeff == 0) continue;
        int sum = temp[i].coeff;
        int e = temp[i].exp;
        for (int j = i + 1; j < ttemp; j++) {
            if (temp[j].exp == e) {
                sum += temp[j].coeff;
                temp[j].coeff = 0;
            }
        }
        if (sum != 0) {
            result[k].coeff = sum;
            result[k].exp = e;
            k++;
        }
    }
    // 降冪排序
    for (int i = 0; i < k - 1; i++)
        for (int j = i + 1; j < k; j++)
            if (result[i].exp < result[j].exp) {
                struct Polynomial tmp = result[i];
                result[i] = result[j];
                result[j] = tmp;
            }
    return k;
}

void dividePolynomials(struct Polynomial P1[], int t1, struct Polynomial P2[], int t2,
                       struct Polynomial quotient[], int *tq,
                       struct Polynomial remainder[], int *tr) {
    int allZero = 1;
    for (int i = 0; i < t2; i++)
        if (P2[i].coeff != 0) allZero = 0;
    if (allZero) {
        printf("p1/p2:Error: divide by zero polynomial\n");
        *tq = *tr = 0;
        return;
    }

    for (int i = 0; i < t1; i++) remainder[i] = P1[i];
    *tr = t1;
    *tq = 0;

    while (*tr > 0 && remainder[0].exp >= P2[0].exp) {
        int coeff = remainder[0].coeff / P2[0].coeff;
        int exp = remainder[0].exp - P2[0].exp;

        quotient[*tq].coeff = coeff;
        quotient[*tq].exp = exp;
        (*tq)++;

        struct Polynomial term[1] = {{coeff, exp}};
        struct Polynomial temp[MAX_TERMS];
        int ttemp = multiplyPolynomials(term, 1, P2, t2, temp);

        *tr = subtractPolynomials(remainder, *tr, temp, ttemp, remainder);
    }
}

//==================== 單一多項式功能 ====================//
void singlePolynomialMenu() {
    struct Polynomial P[15];
    int terms = 0;
    int choice;
    printf("\n--- Single Polynomial Mode ---\n");
    readPolynomial(P, &terms);

    while (1) {
        printf("\n========== Single Polynomial Menu ==========\n");
        printf("(1) Display P\n");
        printf("(2) Query coefficient by exponent\n");
        printf("(3) Evaluate P(x)\n");
        printf("(0) Return to main menu\n");
        printf("===========================================\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        if (choice == 0) break;
        switch (choice) {
            case 1:
                displayPolynomial(P, terms, "P");
                break;
            case 2: {
                int exp;
                printf("Enter exponent: ");
                scanf("%d", &exp);
                int found = 0;
                for (int i = 0; i < terms; i++) {
                    if (P[i].exp == exp) {
                        printf("Coefficient of x^%d = %d\n", exp, P[i].coeff);
                        found = 1;
                        break;
                    }
                }
                if (!found) printf("Coefficient of x^%d = 0\n", exp);
                break;
            }
            case 3: {
                int x;
                printf("Enter x: ");
                scanf("%d", &x);
                int sum = 0;
                for (int i = 0; i < terms; i++)
                    sum += P[i].coeff * pow(x, P[i].exp);
                printf("P(%d) = %d\n", x, sum);
                break;
            }
            default:
                printf("Invalid choice.\n");
        }
    }
}

//==================== 兩個多項式功能 ====================//
void twoPolynomialsMenu() {
    struct Polynomial P1[15], P2[15], result[50], quotient[50], remainder[50];
    int t1 = 0, t2 = 0, tres = 0, tq = 0, tr = 0;
    int choice;

    printf("\n--- Two Polynomials Mode ---\n");
    printf("Input P1:\n");
    readPolynomial(P1, &t1);
    printf("\nInput P2:\n");
    readPolynomial(P2, &t2);

    while (1) {
        printf("\n========== Two Polynomials Menu ==========\n");
        printf("(1) Display P1, P2\n");
        printf("(2) Compute P1 + P2\n");
        printf("(3) Compute P1 - P2\n");
        printf("(4) Compute P1 * P2\n");
        printf("(5) Compute P1 / P2 (Quotient and Remainder)\n");
        printf("(0) Return to main menu\n");
        printf("==========================================\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        if (choice == 0) break;

        switch (choice) {
            case 1:
                displayPolynomial(P1, t1, "p1");
                displayPolynomial(P2, t2, "p2");
                break;
            case 2:
                tres = addPolynomials(P1, t1, P2, t2, result);
                displayPolynomial(result, tres, "p1+p2");
                break;
            case 3:
                tres = subtractPolynomials(P1, t1, P2, t2, result);
                displayPolynomial(result, tres, "p1-p2");
                break;
            case 4:
                tres = multiplyPolynomials(P1, t1, P2, t2, result);
                displayPolynomial(result, tres, "p1*p2");
                break;
            case 5:
                dividePolynomials(P1, t1, P2, t2, quotient, &tq, remainder, &tr);
                printf("p1/p2:Quotient=");
                displayPolynomial(quotient, tq, "");
                if (tr > 0) {
                    printf("Remainder=");
                    displayPolynomial(remainder, tr, "");
                }
                break;
            default:
                printf("Invalid choice.\n");
        }
    }
}

//==================== 主選單 ====================//
int main() {
    int choice;
    while (1) {
        printf("\n========== Polynomial Calculator ==========\n");
        printf("(0) Exit\n");
        printf("(1) Single polynomial P\n");
        printf("(2) Two polynomials P1, P2\n");
        printf("===========================================\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        if (choice == 0) {
            printf("Program terminated.\n");
            break;
        } else if (choice == 1) {
            singlePolynomialMenu();
        } else if (choice == 2) {
            twoPolynomialsMenu();
        } else {
            printf("Invalid choice. Please enter 0, 1, or 2.\n");
        }
    }
    return 0;
}
